// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addCharacterToGame = `-- name: AddCharacterToGame :exec
INSERT INTO game_characters (game_id, character_id) VALUES ($1, $2)
`

type AddCharacterToGameParams struct {
	GameID      uuid.UUID `json:"game_id"`
	CharacterID uuid.UUID `json:"character_id"`
}

func (q *Queries) AddCharacterToGame(ctx context.Context, arg AddCharacterToGameParams) error {
	_, err := q.db.Exec(ctx, addCharacterToGame, arg.GameID, arg.CharacterID)
	return err
}

const addObjectToScene = `-- name: AddObjectToScene :exec
INSERT INTO scenes_objects (scene_id, object_id, pos_x, pos_y) VALUES ($1, $2, $3, $4)
`

type AddObjectToSceneParams struct {
	SceneID  uuid.UUID `json:"scene_id"`
	ObjectID uuid.UUID `json:"object_id"`
	PosX     int16     `json:"pos_x"`
	PosY     int16     `json:"pos_y"`
}

func (q *Queries) AddObjectToScene(ctx context.Context, arg AddObjectToSceneParams) error {
	_, err := q.db.Exec(ctx, addObjectToScene,
		arg.SceneID,
		arg.ObjectID,
		arg.PosX,
		arg.PosY,
	)
	return err
}

const addUserToGame = `-- name: AddUserToGame :exec
INSERT INTO game_players (game_id, user_id, role) VALUES ($1, $2, $3)
`

type AddUserToGameParams struct {
	GameID uuid.UUID `json:"game_id"`
	UserID uuid.UUID `json:"user_id"`
	Role   string    `json:"role"`
}

func (q *Queries) AddUserToGame(ctx context.Context, arg AddUserToGameParams) error {
	_, err := q.db.Exec(ctx, addUserToGame, arg.GameID, arg.UserID, arg.Role)
	return err
}

const createGame = `-- name: CreateGame :one
INSERT INTO games (name, max_players) VALUES ($1, $2) returning id
`

type CreateGameParams struct {
	Name       string `json:"name"`
	MaxPlayers int16  `json:"max_players"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createGame, arg.Name, arg.MaxPlayers)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createGameObject = `-- name: CreateGameObject :exec
INSERT INTO game_objects (object_type, texture) VALUES ($1, $2)
`

type CreateGameObjectParams struct {
	ObjectType int16  `json:"object_type"`
	Texture    string `json:"texture"`
}

func (q *Queries) CreateGameObject(ctx context.Context, arg CreateGameObjectParams) error {
	_, err := q.db.Exec(ctx, createGameObject, arg.ObjectType, arg.Texture)
	return err
}

const createGameScene = `-- name: CreateGameScene :one
INSERT INTO game_scenes (game_id, name, map_image, width, height) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateGameSceneParams struct {
	GameID   uuid.UUID `json:"game_id"`
	Name     string    `json:"name"`
	MapImage string    `json:"map_image"`
	Width    int16     `json:"width"`
	Height   int16     `json:"height"`
}

func (q *Queries) CreateGameScene(ctx context.Context, arg CreateGameSceneParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createGameScene,
		arg.GameID,
		arg.Name,
		arg.MapImage,
		arg.Width,
		arg.Height,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getGame = `-- name: GetGame :one
SELECT id, created_at, updated_at, name, max_players FROM games WHERE games.id = $1
`

func (q *Queries) GetGame(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.MaxPlayers,
	)
	return i, err
}

const getGameCharacters = `-- name: GetGameCharacters :many
SELECT characters.id, characters.created_at, characters.updated_at, characters.name, characters.class, characters.level, characters.avatar, characters.user_id, characters.metadata FROM characters 
JOIN game_characters ON characters.id IN (
    SELECT character_id FROM game_characters WHERE game_characters.game_id = $1
)
`

func (q *Queries) GetGameCharacters(ctx context.Context, gameID uuid.UUID) ([]Character, error) {
	rows, err := q.db.Query(ctx, getGameCharacters, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Character{}
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Class,
			&i.Level,
			&i.Avatar,
			&i.UserID,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameScenes = `-- name: GetGameScenes :many
SELECT id, game_id, created_at, updated_at, name, map_image, width, height FROM game_scenes WHERE game_id = $1
`

func (q *Queries) GetGameScenes(ctx context.Context, gameID uuid.UUID) ([]GameScene, error) {
	rows, err := q.db.Query(ctx, getGameScenes, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameScene{}
	for rows.Next() {
		var i GameScene
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.MapImage,
			&i.Width,
			&i.Height,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameUsers = `-- name: GetGameUsers :many
SELECT id, username FROM users
JOIN game_players ON users.id IN (
    SELECT user_id FROM game_players WHERE game_players.game_id = $1
)
`

type GetGameUsersRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

func (q *Queries) GetGameUsers(ctx context.Context, gameID uuid.UUID) ([]GetGameUsersRow, error) {
	rows, err := q.db.Query(ctx, getGameUsers, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGameUsersRow{}
	for rows.Next() {
		var i GetGameUsersRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSceneObjects = `-- name: GetSceneObjects :many
SELECT scene_id, object_id, pos_x, pos_y FROM scenes_objects WHERE scene_id = $1
`

func (q *Queries) GetSceneObjects(ctx context.Context, sceneID uuid.UUID) ([]ScenesObject, error) {
	rows, err := q.db.Query(ctx, getSceneObjects, sceneID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScenesObject{}
	for rows.Next() {
		var i ScenesObject
		if err := rows.Scan(
			&i.SceneID,
			&i.ObjectID,
			&i.PosX,
			&i.PosY,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
