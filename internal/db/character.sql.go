// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (name, class, level, avatar, metadata, user_id) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, created_at, updated_at, name, class, level, avatar, user_id, metadata
`

type CreateCharacterParams struct {
	Name     string    `json:"name"`
	Class    string    `json:"class"`
	Level    int16     `json:"level"`
	Avatar   *string   `json:"avatar"`
	Metadata []byte    `json:"metadata"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, createCharacter,
		arg.Name,
		arg.Class,
		arg.Level,
		arg.Avatar,
		arg.Metadata,
		arg.UserID,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Class,
		&i.Level,
		&i.Avatar,
		&i.UserID,
		&i.Metadata,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteCharacter(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCharacter, id)
	return err
}

const getCharacterByID = `-- name: GetCharacterByID :one
SELECT id, created_at, updated_at, name, class, level, avatar, user_id, metadata FROM characters WHERE id = $1
`

func (q *Queries) GetCharacterByID(ctx context.Context, id uuid.UUID) (Character, error) {
	row := q.db.QueryRow(ctx, getCharacterByID, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Class,
		&i.Level,
		&i.Avatar,
		&i.UserID,
		&i.Metadata,
	)
	return i, err
}

const getCharactersByUserID = `-- name: GetCharactersByUserID :many
SELECT id, name, class, level, avatar FROM characters WHERE user_id = $1
`

type GetCharactersByUserIDRow struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Class  string    `json:"class"`
	Level  int16     `json:"level"`
	Avatar *string   `json:"avatar"`
}

func (q *Queries) GetCharactersByUserID(ctx context.Context, userID uuid.UUID) ([]GetCharactersByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getCharactersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCharactersByUserIDRow{}
	for rows.Next() {
		var i GetCharactersByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Class,
			&i.Level,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacter = `-- name: UpdateCharacter :one
UPDATE characters SET name = $2, class = $3, level = $4, avatar = $5, metadata = $6 WHERE id = $1 
RETURNING id, created_at, updated_at, name, class, level, avatar, user_id, metadata
`

type UpdateCharacterParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Class    string    `json:"class"`
	Level    int16     `json:"level"`
	Avatar   *string   `json:"avatar"`
	Metadata []byte    `json:"metadata"`
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, updateCharacter,
		arg.ID,
		arg.Name,
		arg.Class,
		arg.Level,
		arg.Avatar,
		arg.Metadata,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Class,
		&i.Level,
		&i.Avatar,
		&i.UserID,
		&i.Metadata,
	)
	return i, err
}
